#-----------------------------------------------------------
# Vivado v2014.4 (64-bit)
# SW Build 1071353 on Tue Nov 18 18:29:27 MST 2014
# IP Build 1070531 on Tue Nov 18 01:10:18 MST 2014
# Start of session at: Mon Jul 27 14:25:58 2020
# Process ID: 12384
# Log file: E:/UV/FPGA/VERIFY/vry_AXI_DMA/vry_AXI_DMA/vivado.log
# Journal file: E:/UV/FPGA/VERIFY/vry_AXI_DMA/vry_AXI_DMA\vivado.jou
#-----------------------------------------------------------
start_gui
open_project E:/UV/FPGA/VERIFY/vry_AXI_DMA/vry_AXI_DMA/vry_AXI_DMA.xpr
Scanning sources...
Finished scanning sources
INFO: [IP_Flow 19-234] Refreshing IP repositories
INFO: [IP_Flow 19-1700] Loaded user IP repository 'e:/UV/FPGA/VERIFY/vry_AXI_DMA/ip_repo/myip_1.0'.
INFO: [IP_Flow 19-2313] Loaded Vivado IP repository 'D:/install/Xilinx/Vivado/2014.4/data/ip'.
create_peripheral xilinx.com user axi_full 1.0 -dir E:/UV/FPGA/VERIFY/vry_AXI_DMA/vry_AXI_DMA/ip_repo/axi_full
add_peripheral_interface M00_AXI -interface_mode master -axi_type full [ipx::find_open_core xilinx.com:user:axi_full:1.0]
generate_peripheral -bfm_example_design -debug_hw_example_design [ipx::find_open_core xilinx.com:user:axi_full:1.0]
write_peripheral [ipx::find_open_core xilinx.com:user:axi_full:1.0]
set_property ip_repo_paths  {E:/UV/FPGA/VERIFY/vry_AXI_DMA/vry_AXI_DMA/ip_repo/axi_full/axi_full_1.0 E:/UV/FPGA/VERIFY/vry_AXI_DMA/ip_repo/myip_1.0} [current_project]
update_ip_catalog -rebuild
INFO: [IP_Flow 19-234] Refreshing IP repositories
INFO: [IP_Flow 19-1700] Loaded user IP repository 'e:/UV/FPGA/VERIFY/vry_AXI_DMA/vry_AXI_DMA/ip_repo/axi_full/axi_full_1.0'.
INFO: [IP_Flow 19-1700] Loaded user IP repository 'e:/UV/FPGA/VERIFY/vry_AXI_DMA/ip_repo/myip_1.0'.
set_property ip_repo_paths  e:/UV/FPGA/VERIFY/vry_AXI_DMA/vry_AXI_DMA/ip_repo/axi_full/axi_full_1.0 [current_project]
update_ip_catalog
INFO: [IP_Flow 19-234] Refreshing IP repositories
INFO: [IP_Flow 19-1700] Loaded user IP repository 'e:/UV/FPGA/VERIFY/vry_AXI_DMA/vry_AXI_DMA/ip_repo/axi_full/axi_full_1.0'.
source E:\UV\FPGA\VERIFY\vry_AXI_DMA\vry_AXI_DMA\ip_repo\axi_full\axi_full_1.0\example_designs\debug_hw_design\design.tcl
couldn't read file "E:UVFPGAVERIFYry_AXI_DMAry_AXI_DMAip_repoxi_fullxi_full_1.0example_designsdebug_hw_designdesign.tcl": no such file or directory
source E:/UV/FPGA/VERIFY/vry_AXI_DMA/vry_AXI_DMA/ip_repo/axi_full/axi_full_1.0/example_designs/debug_hw_design/design.tcl
# proc create_ipi_design { offsetfile design_name } {
# 
# 	create_bd_design $design_name
# 	open_bd_design $design_name
# 
# 	# Create and configure Clock/Reset
# 	create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz sys_clk_0
# 	create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset sys_reset_0
# 
# 	#check if current_board is set, if true - figure out required clocks.
# 	set is_board_clock_found 0
# 	set is_board_reset_found 0
# 	set external_reset_port ""
# 	set external_clock_port ""
# 
# 	if { [current_board_part -quiet] != "" } {
# 
# 		#check if any reset interface exists in board.
# 		set board_reset [lindex [get_board_part_interfaces -filter { BUSDEF_NAME == reset_rtl && MODE == slave }] 0 ]
# 		if { $board_reset ne "" } {
# 			set is_board_reset_found 1
# 			apply_board_connection -board_interface $board_reset -ip_intf sys_clk_0/reset -diagram [current_bd_design]
# 			apply_board_connection -board_interface $board_reset -ip_intf sys_reset_0/ext_reset -diagram [current_bd_design]
# 			set external_rst [get_bd_ports -quiet -of_objects [get_bd_nets -quiet -of_objects [get_bd_pins -quiet sys_clk_0/reset]]]
# 			if { $external_rst ne "" } {
# 				set external_reset_port [get_property NAME $external_rst]
# 			}
# 		} else {
# 			send_msg "ptgen 51-200" WARNING "No reset interface found in current_board, Users may need to specify the location constraints manually."
# 		}
# 
# 		# check for differential clock, exclude any special clocks which has TYPE property.
# 		set board_clock_busifs ""
# 		foreach busif [get_board_part_interfaces -filter "BUSDEF_NAME == diff_clock_rtl"] {
# 			set type [get_property PARAM.TYPE $busif]
# 			if { $type == "" } {
# 				set board_clock_busifs $busif
# 				break
# 			}
# 		}
# 		if { $board_clock_busifs ne "" } {
# 			apply_board_connection -board_interface $board_clock_busifs -ip_intf sys_clk_0/CLK_IN1_D -diagram [current_bd_design]
# 			set is_board_clock_found 1
# 		} else {
# 			# check for single ended clock
# 			set board_sclock_busifs [lindex [get_board_part_interfaces -filter "BUSDEF_NAME == clock_rtl"] 0 ]
# 			if { $board_sclock_busifs ne "" } {
# 			    apply_board_connection -board_interface $board_sclock_busifs -ip_intf sys_clk_0/clock_CLK_IN1 -diagram [current_bd_design]
# 				set external_clk [get_bd_ports -quiet -of_objects [get_bd_nets -quiet -of_objects [get_bd_pins -quiet sys_clk_0/clk_in1]]]
# 				if { $external_clk ne "" } {
# 					set external_clock_port [get_property NAME $external_clk]
# 				}
# 				set is_board_clock_found 1
# 			} else {
# 				send_msg "ptgen 51-200" WARNING "No clock interface found in current_board, Users may need to specify the location constraints manually."
# 			}
# 		}
# 
# 	} else {
# 		send_msg "ptgen 51-201" WARNING "No board selected in current_project. Users may need to specify the location constraints manually."
# 	}
# 
# 	#if there is no corresponding board interface found, assume constraints will be provided manually while pin planning.
# 	if { $is_board_reset_found == 0 } {
# 		create_bd_port -dir I -type rst reset_rtl
# 		set_property CONFIG.POLARITY [get_property CONFIG.POLARITY [get_bd_pins sys_clk_0/reset]] [get_bd_ports reset_rtl]
# 		connect_bd_net [get_bd_pins sys_reset_0/ext_reset_in] [get_bd_ports reset_rtl]
# 		connect_bd_net [get_bd_ports reset_rtl] [get_bd_pins sys_clk_0/reset]
# 		set external_reset_port reset_rtl
# 	}
# 	if { $is_board_clock_found == 0 } {
# 		create_bd_port -dir I -type clk clock_rtl
# 		connect_bd_net [get_bd_pins sys_clk_0/clk_in1] [get_bd_ports clock_rtl]
# 		set external_clock_port clock_rtl
# 	}
# 
# 	#Avoid IPI DRC, make clock port synchronous to reset
# 	if { $external_clock_port ne "" && $external_reset_port ne "" } {
# 		set_property CONFIG.ASSOCIATED_RESET $external_reset_port [get_bd_ports $external_clock_port]
# 	}
# 
# 	# Connect other sys_reset pins
# 	connect_bd_net [get_bd_pins sys_reset_0/slowest_sync_clk] [get_bd_pins sys_clk_0/clk_out1]
# 	connect_bd_net [get_bd_pins sys_clk_0/locked] [get_bd_pins sys_reset_0/dcm_locked]
# 
# 	# Create instance: axi_full_0, and set properties
# 	set axi_full_0 [ create_bd_cell -type ip -vlnv xilinx.com:user:axi_full:1.0 axi_full_0 ]
# 
# 	# Create instance: jtag_axi_0, and set properties
# 	set jtag_axi_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:jtag_axi jtag_axi_0 ]
# 	set_property -dict [list CONFIG.PROTOCOL {0}] [get_bd_cells jtag_axi_0]
# 	connect_bd_net [get_bd_pins jtag_axi_0/aclk] [get_bd_pins sys_clk_0/clk_out1]
# 	connect_bd_net [get_bd_pins jtag_axi_0/aresetn] [get_bd_pins sys_reset_0/peripheral_aresetn]
# 
# 	# Create instance: axi_peri_interconnect, and set properties
# 	set axi_peri_interconnect [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect axi_peri_interconnect ]
# 	connect_bd_net [get_bd_pins axi_peri_interconnect/ACLK] [get_bd_pins sys_clk_0/clk_out1]
# 	connect_bd_net [get_bd_pins axi_peri_interconnect/ARESETN] [get_bd_pins sys_reset_0/interconnect_aresetn]
# 	set_property -dict [ list CONFIG.NUM_SI {1}  ] $axi_peri_interconnect
# 	connect_bd_net [get_bd_pins axi_peri_interconnect/S00_ACLK] [get_bd_pins sys_clk_0/clk_out1]
# 	connect_bd_net [get_bd_pins axi_peri_interconnect/S00_ARESETN] [get_bd_pins sys_reset_0/peripheral_aresetn]
# 	connect_bd_intf_net [get_bd_intf_pins jtag_axi_0/M_AXI] [get_bd_intf_pins axi_peri_interconnect/S00_AXI]
# 
# 	set_property -dict [ list CONFIG.NUM_MI {3} ] $axi_peri_interconnect
# 	connect_bd_net [get_bd_pins axi_peri_interconnect/M00_ACLK] [get_bd_pins sys_clk_0/clk_out1]
# 	connect_bd_net [get_bd_pins axi_peri_interconnect/M00_ARESETN] [get_bd_pins sys_reset_0/peripheral_aresetn]
# 	connect_bd_net [get_bd_pins axi_peri_interconnect/M01_ACLK] [get_bd_pins sys_clk_0/clk_out1]
# 	connect_bd_net [get_bd_pins axi_peri_interconnect/M01_ARESETN] [get_bd_pins sys_reset_0/peripheral_aresetn]
# 	connect_bd_net [get_bd_pins axi_peri_interconnect/M02_ACLK] [get_bd_pins sys_clk_0/clk_out1]
# 	connect_bd_net [get_bd_pins axi_peri_interconnect/M02_ARESETN] [get_bd_pins sys_reset_0/peripheral_aresetn]
# 
# 	# Create instance: axi_mem_interconnect, and set properties
# 	set axi_mem_interconnect [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect axi_mem_interconnect ]
# 	connect_bd_net [get_bd_pins axi_mem_interconnect/ACLK] [get_bd_pins sys_clk_0/clk_out1]
# 	connect_bd_net [get_bd_pins axi_mem_interconnect/ARESETN] [get_bd_pins sys_reset_0/interconnect_aresetn]
# 	set_property -dict [ list CONFIG.NUM_MI {1} ] $axi_mem_interconnect
# 	connect_bd_net [get_bd_pins axi_mem_interconnect/M00_ACLK] [get_bd_pins sys_clk_0/clk_out1]
# 	connect_bd_net [get_bd_pins axi_mem_interconnect/M00_ARESETN] [get_bd_pins sys_reset_0/peripheral_aresetn]
# 
# 	set_property -dict [ list CONFIG.NUM_SI {2} ] $axi_mem_interconnect
# 	connect_bd_net [get_bd_pins axi_mem_interconnect/S00_ACLK] [get_bd_pins sys_clk_0/clk_out1]
# 	connect_bd_net [get_bd_pins axi_mem_interconnect/S00_ARESETN] [get_bd_pins sys_reset_0/peripheral_aresetn]
# 	connect_bd_net [get_bd_pins axi_mem_interconnect/S01_ACLK] [get_bd_pins sys_clk_0/clk_out1]
# 	connect_bd_net [get_bd_pins axi_mem_interconnect/S01_ARESETN] [get_bd_pins sys_reset_0/peripheral_aresetn]
# 	connect_bd_intf_net [get_bd_intf_pins axi_mem_interconnect/S01_AXI] [get_bd_intf_pins axi_peri_interconnect/M00_AXI]
# 
# 	# Create instance: axi_bram_ctrl_0, and set properties
# 	set axi_bram_ctrl_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl axi_bram_ctrl_0 ]
# 	connect_bd_intf_net [get_bd_intf_pins axi_mem_interconnect/M00_AXI] [get_bd_intf_pins axi_bram_ctrl_0/S_AXI]
# 	connect_bd_net [get_bd_pins axi_bram_ctrl_0/s_axi_aclk] [get_bd_pins sys_clk_0/clk_out1]
# 	connect_bd_net [get_bd_pins axi_bram_ctrl_0/s_axi_aresetn] [get_bd_pins sys_reset_0/peripheral_aresetn]
# 
# 	# Create instance: axi_bram_0, and set properties
# 	set axi_bram_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen axi_bram_0 ]
# 	set_property -dict [ list CONFIG.Memory_Type {True_Dual_Port_RAM}  ] $axi_bram_0
# 	connect_bd_intf_net [get_bd_intf_pins axi_bram_ctrl_0/BRAM_PORTA] [get_bd_intf_pins axi_bram_0/BRAM_PORTA]
# 	connect_bd_intf_net [get_bd_intf_pins axi_bram_ctrl_0/BRAM_PORTB] [get_bd_intf_pins axi_bram_0/BRAM_PORTB]
# 
# 	# Create instance: axi_gpio_out, and set properties
# 	set axi_gpio_out [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio axi_gpio_out ]
# 	set_property -dict [ list CONFIG.C_ALL_OUTPUTS {1} CONFIG.C_GPIO_WIDTH {1}  ] $axi_gpio_out
# 	connect_bd_net [get_bd_pins axi_gpio_out/s_axi_aclk] [get_bd_pins sys_clk_0/clk_out1]
# 	connect_bd_net [get_bd_pins axi_gpio_out/s_axi_aresetn] [get_bd_pins sys_reset_0/peripheral_aresetn]
# 	connect_bd_intf_net [get_bd_intf_pins axi_gpio_out/S_AXI] [get_bd_intf_pins axi_peri_interconnect/M01_AXI]
# 
# 	# Create instance: axi_gpio_in, and set properties
# 	set axi_gpio_in [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio axi_gpio_in ]
# 	set_property -dict [ list CONFIG.C_ALL_INPUTS {1} CONFIG.C_GPIO_WIDTH {2}  ] $axi_gpio_in
# 	connect_bd_net [get_bd_pins axi_gpio_in/s_axi_aclk] [get_bd_pins sys_clk_0/clk_out1]
# 	connect_bd_net [get_bd_pins axi_gpio_in/s_axi_aresetn] [get_bd_pins sys_reset_0/peripheral_aresetn]
# 	connect_bd_intf_net [get_bd_intf_pins axi_gpio_in/S_AXI] [get_bd_intf_pins axi_peri_interconnect/M02_AXI]
# 
# 	# Create instance: xlconcat_0, and set properties
# 	set xlconcat_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat xlconcat_0 ]
# 	set_property -dict [ list CONFIG.NUM_PORTS {2}  ] $xlconcat_0
# 	connect_bd_net [get_bd_pins xlconcat_0/dout] [get_bd_pins axi_gpio_in/gpio_io_i]
# 
# 	# Connect all clock, reset & status pins of axi_full_0 master interfaces..
# 	connect_bd_intf_net [get_bd_intf_pins axi_mem_interconnect/S00_AXI] [get_bd_intf_pins axi_full_0/M00_AXI]
# 	connect_bd_net [get_bd_pins axi_full_0/m00_axi_aclk] [get_bd_pins sys_clk_0/clk_out1]
# 	connect_bd_net [get_bd_pins axi_full_0/m00_axi_aresetn] [get_bd_pins sys_reset_0/peripheral_aresetn]
# 	connect_bd_net [get_bd_pins axi_full_0/m00_axi_txn_done] [get_bd_pins xlconcat_0/In0]
# 	connect_bd_net [get_bd_pins axi_full_0/m00_axi_error] [get_bd_pins xlconcat_0/In1]
# 	connect_bd_net [get_bd_pins axi_full_0/m00_axi_init_axi_txn] [ get_bd_pins axi_gpio_out/gpio_io_o ]
# 
# 
# 	# Auto assign address
# 	assign_bd_address
# 
# 	# Configure address param & range of axi_full_0 master interfaces..
# 	set_property range 16K [get_bd_addr_segs {jtag_axi_0/Data/SEG_axi_bram_ctrl_0_Mem0}]
# 	set_property range 16K [get_bd_addr_segs {axi_full_0/M00_AXI/SEG_axi_bram_ctrl_0_Mem0}]
# 	set_property -dict [list  CONFIG.C_M00_AXI_TARGET_SLAVE_BASE_ADDR {0xC0000000} ] [get_bd_cells axi_full_0]
# 
# 	# Copy all address to axi_full_v1_0_include.tcl file
# 	set bd_path [get_property DIRECTORY [current_project]]/[current_project].srcs/[current_fileset]/bd
# 	upvar 1 $offsetfile offset_file
# 	set offset_file "${bd_path}/axi_full_v1_0_include.tcl"
# 	set fp [open $offset_file "w"]
# 	puts $fp "# Configuration address parameters"
# 
# 	set offset [get_property OFFSET [get_bd_addr_segs /jtag_axi_0/Data/SEG_axi_gpio_in_Reg ]]
# 	puts $fp "set axi_gpio_in_addr ${offset}"
# 
# 	set offset [get_property OFFSET [get_bd_addr_segs /jtag_axi_0/Data/SEG_axi_gpio_out_Reg ]]
# 	puts $fp "set axi_gpio_out_addr ${offset}"
# 
# 	close $fp
# }
# set ip_path [file dirname [file normalize [get_property XML_FILE_NAME [ipx::get_cores xilinx.com:user:axi_full:1.0]]]]
# set hw_test_file ${ip_path}/example_designs/debug_hw_design/axi_full_v1_0_hw_test.tcl
# set repo_paths [get_property ip_repo_paths [current_fileset]] 
# if { [lsearch -exact -nocase $repo_paths $ip_path ] == -1 } {
# 	set_property ip_repo_paths "$ip_path [get_property ip_repo_paths [current_fileset]]" [current_fileset]
# 	update_ip_catalog
# }
# set design_name ""
# set all_bd {}
# set all_bd_files [get_files *.bd -quiet]
# foreach file $all_bd_files {
# set file_name [string range $file [expr {[string last "/" $file] + 1}] end]
# set bd_name [string range $file_name 0 [expr {[string last "." $file_name] -1}]]
# lappend all_bd $bd_name
# }
# for { set i 1 } { 1 } { incr i } {
# 	set design_name "axi_full_v1_0_hw_${i}"
# 	if { [lsearch -exact -nocase $all_bd $design_name ] == -1 } {
# 		break
# 	}
# }
# set intf_address_include_file ""
# create_ipi_design intf_address_include_file ${design_name}
Wrote  : <E:/UV/FPGA/VERIFY/vry_AXI_DMA/vry_AXI_DMA/vry_AXI_DMA.srcs/sources_1/bd/axi_full_v1_0_hw_1/axi_full_v1_0_hw_1.bd> 
WARNING: [ptgen 51-201] No board selected in current_project. Users may need to specify the location constraints manually.
create_bd_cell: Time (s): cpu = 00:00:04 ; elapsed = 00:00:05 . Memory (MB): peak = 784.285 ; gain = 24.836
create_bd_cell: Time (s): cpu = 00:00:05 ; elapsed = 00:00:07 . Memory (MB): peak = 784.285 ; gain = 24.836
create_bd_cell: Time (s): cpu = 00:00:04 ; elapsed = 00:00:05 . Memory (MB): peak = 827.219 ; gain = 28.074
create_bd_cell: Time (s): cpu = 00:00:05 ; elapsed = 00:00:07 . Memory (MB): peak = 827.219 ; gain = 42.934
create_bd_cell: Time (s): cpu = 00:00:03 ; elapsed = 00:00:05 . Memory (MB): peak = 828.457 ; gain = 1.238
WARNING: [BD 41-1306] The connection to interface pin /axi_gpio_in/gpio_io_i is being overridden by the user. This pin will not be connected as a part of interface connection GPIO
WARNING: [BD 41-1306] The connection to interface pin /axi_gpio_out/gpio_io_o is being overridden by the user. This pin will not be connected as a part of interface connection GPIO
</axi_bram_ctrl_0/S_AXI/Mem0> is being mapped into </axi_full_0/M00_AXI> at <0xC0000000[ 8K ]>
</axi_bram_ctrl_0/S_AXI/Mem0> is being mapped into </jtag_axi_0/Data> at <0xC0000000[ 8K ]>
</axi_gpio_out/S_AXI/Reg> is being mapped into </jtag_axi_0/Data> at <0x40000000[ 64K ]>
</axi_gpio_in/S_AXI/Reg> is being mapped into </jtag_axi_0/Data> at <0x40010000[ 64K ]>
# save_bd_design
Wrote  : <E:/UV/FPGA/VERIFY/vry_AXI_DMA/vry_AXI_DMA/vry_AXI_DMA.srcs/sources_1/bd/axi_full_v1_0_hw_1/axi_full_v1_0_hw_1.bd> 
# validate_bd_design
validate_bd_design: Time (s): cpu = 00:00:08 ; elapsed = 00:00:09 . Memory (MB): peak = 871.355 ; gain = 14.465
INFO: [BD 41-1379] This design does not contain any processor.
Generated Block Design Tcl file E:/UV/FPGA/VERIFY/vry_AXI_DMA/vry_AXI_DMA/vry_AXI_DMA.srcs/sources_1/bd/axi_full_v1_0_hw_1/hw_handoff/axi_full_v1_0_hw_1_bd.tcl
Exporting to file E:/UV/FPGA/VERIFY/vry_AXI_DMA/vry_AXI_DMA/vry_AXI_DMA.srcs/sources_1/bd/axi_full_v1_0_hw_1/hw_handoff/axi_full_v1_0_hw_1.hwh
WARNING: [BD 41-235] Width mismatch when connecting pin: '/axi_mem_interconnect/s00_couplers/M_AXI_rid'(1) to net 's00_couplers_to_xbar_RID'(2) - Only lower order bits will be connected.
WARNING: [BD 41-235] Width mismatch when connecting pin: '/axi_mem_interconnect/s00_couplers/M_AXI_bid'(1) to net 's00_couplers_to_xbar_BID'(2) - Only lower order bits will be connected.
WARNING: [BD 41-235] Width mismatch when connecting pin: '/axi_mem_interconnect/xbar/s_axi_arid'(2) to net 's00_couplers_to_xbar_ARID'(1) - Only lower order bits will be connected.
WARNING: [BD 41-235] Width mismatch when connecting pin: '/axi_mem_interconnect/xbar/s_axi_awid'(2) to net 's00_couplers_to_xbar_AWID'(1) - Only lower order bits will be connected.
WARNING: [BD 41-235] Width mismatch when connecting pin: '/axi_mem_interconnect/xbar/s_axi_awid'(2) to net 's01_couplers_to_xbar_AWID'(1) - Only lower order bits will be connected.
WARNING: [BD 41-235] Width mismatch when connecting pin: '/axi_mem_interconnect/s01_couplers/M_AXI_rid'(1) to net 's01_couplers_to_xbar_RID'(2) - Only lower order bits will be connected.
WARNING: [BD 41-235] Width mismatch when connecting pin: '/axi_mem_interconnect/s01_couplers/M_AXI_bid'(1) to net 's01_couplers_to_xbar_BID'(2) - Only lower order bits will be connected.
WARNING: [BD 41-235] Width mismatch when connecting pin: '/axi_mem_interconnect/xbar/s_axi_arid'(2) to net 's01_couplers_to_xbar_ARID'(1) - Only lower order bits will be connected.
WARNING: [BD 41-235] Width mismatch when connecting pin: '/axi_bram_0/addra'(32) to net 'axi_bram_ctrl_0_BRAM_PORTA_ADDR'(14) - Only lower order bits will be connected.
WARNING: [BD 41-235] Width mismatch when connecting pin: '/axi_bram_0/addrb'(32) to net 'axi_bram_ctrl_0_BRAM_PORTB_ADDR'(14) - Only lower order bits will be connected.
Verilog Output written to : axi_full_v1_0_hw_1.v
Verilog Output written to : axi_full_v1_0_hw_1_wrapper.v
Wrote  : <E:/UV/FPGA/VERIFY/vry_AXI_DMA/vry_AXI_DMA/vry_AXI_DMA.srcs/sources_1/bd/axi_full_v1_0_hw_1/axi_full_v1_0_hw_1.bd> 
make_wrapper: Time (s): cpu = 00:00:07 ; elapsed = 00:00:07 . Memory (MB): peak = 944.020 ; gain = 72.664
# set wrapper_file [make_wrapper -files [get_files ${design_name}.bd] -top -force]
# import_files -force -norecurse $wrapper_file
# puts "-------------------------------------------------------------------------------------------------"
-------------------------------------------------------------------------------------------------
# puts "INFO NEXT STEPS : Until this stage, debug hardware design has been created, "
INFO NEXT STEPS : Until this stage, debug hardware design has been created, 
# puts "   please perform following steps to test design in targeted board."
   please perform following steps to test design in targeted board.
# puts "1. Generate bitstream"
1. Generate bitstream
# puts "2. Setup your targeted board, open hardware manager and open new(or existing) hardware target"
2. Setup your targeted board, open hardware manager and open new(or existing) hardware target
# puts "3. Download generated bitstream"
3. Download generated bitstream
# puts "4. Run generated hardware test using below command, this invokes basic read/write operation"
4. Run generated hardware test using below command, this invokes basic read/write operation
# puts "   to every interface present in the peripheral : xilinx.com:user:myip:1.0"
   to every interface present in the peripheral : xilinx.com:user:myip:1.0
# puts "   : source -notrace ${hw_test_file}"
   : source -notrace E:/UV/FPGA/VERIFY/vry_AXI_DMA/vry_AXI_DMA/ip_repo/axi_full/axi_full_1.0/example_designs/debug_hw_design/axi_full_v1_0_hw_test.tcl
# puts "-------------------------------------------------------------------------------------------------"
-------------------------------------------------------------------------------------------------
update_compile_order -fileset sources_1
update_compile_order -fileset sim_1
source E:/UV/FPGA/VERIFY/vry_AXI_DMA/vry_AXI_DMA/ip_repo/axi_full/axi_full_1.0/example_designs/bfm_design/design.tcl
# proc create_ipi_design { offsetfile design_name } {
# 	create_bd_design $design_name
# 	open_bd_design $design_name
# 
# 	# Create Clock and Reset Ports
# 	set ACLK [ create_bd_port -dir I -type clk ACLK ]
# 	set_property -dict [ list CONFIG.FREQ_HZ {100000000} CONFIG.PHASE {0.000} CONFIG.CLK_DOMAIN "${design_name}_ACLK" ] $ACLK
# 	set ARESETN [ create_bd_port -dir I -type rst ARESETN ]
# 	set_property -dict [ list CONFIG.POLARITY {ACTIVE_LOW}  ] $ARESETN
# 	set_property CONFIG.ASSOCIATED_RESET ARESETN $ACLK
# 
# 	# Create instance: axi_full_0, and set properties
# 	set axi_full_0 [ create_bd_cell -type ip -vlnv xilinx.com:user:axi_full:1.0 axi_full_0]
# 
# 	# Create External ports
# 	set M00_AXI_INIT_AXI_TXN [ create_bd_port -dir I M00_AXI_INIT_AXI_TXN ]
# 	set M00_AXI_ERROR [ create_bd_port -dir O M00_AXI_ERROR ]
# 	set M00_AXI_TXN_DONE [ create_bd_port -dir O M00_AXI_TXN_DONE ]
# 
# 	# Create instance: slave_0, and set properties
# 	set slave_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:cdn_axi_bfm slave_0]
# 	set_property -dict [ list CONFIG.C_PROTOCOL_SELECTION {1} CONFIG.C_MODE_SELECT {1} CONFIG.C_S_AXI4_HIGHADDR {0x4000FFFF} CONFIG.C_S_AXI4_BASEADDR {0x40000000} CONFIG.C_S_AXI4_MEMORY_MODEL_MODE {1} ] $slave_0
# 
# connect_bd_intf_net [get_bd_intf_pins slave_0/S_AXI] [get_bd_intf_pins axi_full_0/M00_AXI]
# 	# Create port connections
# 	connect_bd_net -net aclk_net [get_bd_ports ACLK] [get_bd_pins slave_0/S_AXI_ACLK] [get_bd_pins axi_full_0/M00_AXI_ACLK]
# 	connect_bd_net -net aresetn_net [get_bd_ports ARESETN] [get_bd_pins slave_0/S_AXI_ARESETN] [get_bd_pins axi_full_0/M00_AXI_ARESETN]
# 	connect_bd_net -net init_axi_txn_00 [get_bd_ports M00_AXI_INIT_AXI_TXN] [get_bd_pins axi_full_0/M00_AXI_INIT_AXI_TXN]
# 	connect_bd_net -net error_00 [get_bd_ports M00_AXI_ERROR] [get_bd_pins axi_full_0/M00_AXI_ERROR]
# 	connect_bd_net -net txn_done_00 [get_bd_ports M00_AXI_TXN_DONE] [get_bd_pins axi_full_0/M00_AXI_TXN_DONE]
# 
# 	# Auto assign address
# 	assign_bd_address
# 
# 	# Copy all address to interface_address.vh file
# 	set bd_path [file dirname [get_property NAME [get_files ${design_name}.bd]]]
# 	upvar 1 $offsetfile offset_file
# 	set offset_file "${bd_path}/axi_full_v1_0_tb_include.vh"
# 	set fp [open $offset_file "w"]
# 	puts $fp "`ifndef axi_full_v1_0_tb_include_vh_"
# 	puts $fp "`define axi_full_v1_0_tb_include_vh_\n"
# 	puts $fp "//Configuration current bd names"
# 	puts $fp "`define BD_INST_NAME ${design_name}_i"
# 	puts $fp "`define BD_WRAPPER ${design_name}_wrapper\n"
# 	puts $fp "//Configuration address parameters"
# 
# 	puts $fp "`endif"
# 	close $fp
# }
# set ip_path [file dirname [file normalize [get_property XML_FILE_NAME [ipx::get_cores xilinx.com:user:axi_full:1.0]]]]
# set test_bench_file ${ip_path}/example_designs/bfm_design/axi_full_v1_0_tb.v
# set interface_address_vh_file ""
# set repo_paths [get_property ip_repo_paths [current_fileset]] 
# if { [lsearch -exact -nocase $repo_paths $ip_path ] == -1 } {
# 	set_property ip_repo_paths "$ip_path [get_property ip_repo_paths [current_fileset]]" [current_fileset]
# 	update_ip_catalog
# }
# set design_name ""
# set all_bd {}
# set all_bd_files [get_files *.bd -quiet]
# foreach file $all_bd_files {
# set file_name [string range $file [expr {[string last "/" $file] + 1}] end]
# set bd_name [string range $file_name 0 [expr {[string last "." $file_name] -1}]]
# lappend all_bd $bd_name
# }
# for { set i 1 } { 1 } { incr i } {
# 	set design_name "axi_full_v1_0_bfm_${i}"
# 	if { [lsearch -exact -nocase $all_bd $design_name ] == -1 } {
# 		break
# 	}
# }
# create_ipi_design interface_address_vh_file ${design_name}
Wrote  : <E:/UV/FPGA/VERIFY/vry_AXI_DMA/vry_AXI_DMA/vry_AXI_DMA.srcs/sources_1/bd/axi_full_v1_0_bfm_1/axi_full_v1_0_bfm_1.bd> 
WARNING: [IP_Flow 19-2162] IP 'axi_full_v1_0_bfm_1_slave_0_0' is locked:
* IP 'axi_full_v1_0_bfm_1_slave_0_0' requires one or more mandatory licenses but no valid licenses were found. However license checkpoints may prevent use of this IP in some tool flows.
Please select 'Report IP Status' from the 'Tools/Report' menu or run Tcl command 'report_ip_status' for more information.
ERROR: [BD 41-542] Parameter cannot be set on a locked block. The block 'slave_0' is locked, because: * IP 'axi_full_v1_0_bfm_1_slave_0_0' requires one or more mandatory licenses but no valid licenses were found. However license checkpoints may prevent use of this IP in some tool flows.
Please select 'Report IP Status' from the 'Tools/Report' menu or run Tcl command 'report_ip_status' for more information. 
INFO: [Common 17-17] undo 'set_property'
ERROR: [Common 17-39] 'set_property' failed due to earlier errors.

    while executing
"rdi::add_properties -dict {CONFIG.C_PROTOCOL_SELECTION 1 CONFIG.C_MODE_SELECT 1 CONFIG.C_S_AXI4_HIGHADDR 0x4000FFFF CONFIG.C_S_AXI4_BASEADDR 0x4000000..."
    invoked from within
"set_property -dict [ list CONFIG.C_PROTOCOL_SELECTION {1} CONFIG.C_MODE_SELECT {1} CONFIG.C_S_AXI4_HIGHADDR {0x4000FFFF} CONFIG.C_S_AXI4_BASEADDR {0x4..."
    (procedure "create_ipi_design" line 22)
    invoked from within
"create_ipi_design interface_address_vh_file ${design_name}"
    (file "E:/UV/FPGA/VERIFY/vry_AXI_DMA/vry_AXI_DMA/ip_repo/axi_full/axi_full_1.0/example_designs/bfm_design/design.tcl" line 78)
update_compile_order -fileset sources_1
exit
INFO: [Common 17-206] Exiting Vivado at Mon Jul 27 14:52:16 2020...
